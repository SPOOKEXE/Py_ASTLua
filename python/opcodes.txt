SPOOK_EXE
spook_exe
Do Not Disturb

SPOOK_EXE â€” 10/12/2021 1:11 PM
https://www.youtube.com/watch?v=X6VmXMM_c0A
YouTube
Playpoet _135
Top 10 Funniest women
Image
Vyon â€” 10/12/2021 1:21 PM
https://www.youtube.com/watch?v=0J_cc3Zm6Gw&ab_channel=ProfessorLando
YouTube
Professor Lando
What People Don't Understand About Furries
Image
Vyon â€” 12/11/2021 8:17 PM
Hey spook sorry to dm you outta nowhere I was wondering what module you used for your cash "extensions" in Trident Sim
SPOOK_EXE â€” 12/11/2021 8:19 PM
bereza's miners haven one
Vyon â€” 12/11/2021 8:19 PM
Thank you bro
SPOOK_EXE â€” 12/11/2021 8:19 PM
np
SPOOK_EXE â€” 11/05/2022 9:59 AM
BBC
:zamn:
Vyon â€” 11/05/2022 9:59 AM
ðŸ‘€
SPOOK_EXE â€” 04/15/2023 8:34 AM
https://www.amazon.com/Drop-Shift-Mechanical-Gaming-Keyboard/dp/B08L8K7SYZ/ref=sr_1_3?keywords=drop%2Bshift%2Bmechanical%2Bkeyboard&sr=8-3&th=1
DROP Shift Mechanical Gaming Keyboard â€” Full-Size 1800 Layout (99 K...
INTRODUCING OUR FIRST FULL-SIZE KEYBOARD: The latest addition to our family of mechanical keyboards, the Drop SHIFT is our largest and most ambitious undertaking yet. Done in the compact 1800 layout, itâ€™s still significantly shorter than a traditional full-size keyboard, which frees up desk space...
Image
SPOOK_EXE â€” 04/27/2023 6:34 PM
https://github.com/ThePlasmaRailgun/ASTObfuscate
GitHub
GitHub - mundungus443/ASTObfuscate: A Python Obfuscator through AST...
A Python Obfuscator through AST modification. Contribute to mundungus443/ASTObfuscate development by creating an account on GitHub.
GitHub - mundungus443/ASTObfuscate: A Python Obfuscator through AST...
(python obfuscator with AST node transformations)
Vyon â€” 04/27/2023 6:36 PM
.
Attachment file type: archive
Roblox-Lua-Obfuscator-main.rar
268.19 KB
SPOOK_EXE â€” 04/27/2023 7:47 PM
```py
# randomize and include multiple iterations of the same obfuscations over and over
"ApplyMultiIterativeObfuscation"
# unique seeds make it so the obfuscation methods are unique for each script so no collisions occur with similarities (even with the same script as the input)
"UniqueObfuscationSeeding"
# dynamic code generation - generate the code during runtime from seeded values after being encoded - its a factory VM - wave collapse function
Expand
message.txt
5 KB
SPOOK_EXE â€” 04/27/2023 8:06 PM
constant blinding - transform constants in the code into more complicated expressions (e.g. bitwise operations and arithmetic expressions)
"ConstantsBlinding"
cross-data entropy - reuse pieces of other constants, variables, functions, etc and combine results into needed expressions/values for parameters/variables
"CrossDataEntropy"
Vyon â€” 04/27/2023 10:06 PM
https://github.com/gonzalezjo/lua-obfuscation-research
GitHub
GitHub - gonzalezjo/lua-obfuscation-research: A collection of my Lu...
A collection of my Lua obfuscation related research efforts. - GitHub - gonzalezjo/lua-obfuscation-research: A collection of my Lua obfuscation related research efforts.
GitHub - gonzalezjo/lua-obfuscation-research: A collection of my Lu...
Vyon â€” 05/01/2023 3:14 PM
https://education.github.com/globalcampus/student
GitHub
Build software better, together
GitHub is where people build software. More than 100 million people use GitHub to discover, fork, and contribute to over 330 million projects.
Build software better, together
Vyon â€” 05/01/2023 5:45 PM
.
{
	// NOP: noop
	NOP = 0,

	// BREAK: debugger break
	BREAK,

	// LOADNIL: sets register to nil
	// A: target register
	LOADNIL,

	// LOADB: sets register to boolean and jumps to a given short offset (used to compile comparison results into a boolean)
	// A: target register
	// B: value (0/1)
	// C: jump offset
	LOADB,

	// LOADN: sets register to a number literal
	// A: target register
	// D: value (-32768..32767)
	LOADN,

	// LOADK: sets register to an entry from the constant table from the proto (number/string)
	// A: target register
	// D: constant table index (0..32767)
	LOADK,

	// MOVE: move (copy) value from one register to another
	// A: target register
	// B: source register
	MOVE,

	// GETGLOBAL: load value from global table using constant string as a key
	// A: target register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	GETGLOBAL,

	// SETGLOBAL: set value in global table using constant string as a key
	// A: source register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	SETGLOBAL,

	// GETUPVAL: load upvalue from the upvalue table for the current function
	// A: target register
	// B: upvalue index
	GETUPVAL,

	// SETUPVAL: store value into the upvalue table for the current function
	// A: target register
	// B: upvalue index
	SETUPVAL,

	// CLOSEUPVALS: close (migrate to heap) all upvalues that were captured for registers >= target
	// A: target register
	CLOSEUPVALS,

	// GETIMPORT: load imported global table global from the constant table
	// A: target register
	// D: constant table index (0..32767); we assume that imports are loaded into the constant table
	// AUX: 3 10-bit indices of constant strings that, combined, constitute an import path; length of the path is set by the top 2 bits (1,2,3)
	GETIMPORT,

	// GETTABLE: load value from table into target register using key from register
	// A: target register
	// B: table register
	// C: index register
	GETTABLE,

	// SETTABLE: store source register into table using key from register
	// A: source register
	// B: table register
	// C: index register
	SETTABLE,

	// GETTABLEKS: load value from table into target register using constant string as a key
	// A: target register
	// B: table register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	GETTABLEKS,

	// SETTABLEKS: store source register into table using constant string as a key
	// A: source register
	// B: table register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	SETTABLEKS,

	// GETTABLEN: load value from table into target register using small integer index as a key
	// A: target register
	// B: table register
	// C: index-1 (index is 1..256)
	GETTABLEN,

	// SETTABLEN: store source register into table using small integer index as a key
	// A: source register
	// B: table register
	// C: index-1 (index is 1..256)
... (244 lines left)
Collapse
message.txt
14 KB
SPOOK_EXE â€” 05/09/2023 8:50 AM
Image
Vyon â€” 05/09/2023 11:52 PM
How'd you do with the interview?
SPOOK_EXE â€” 05/09/2023 11:52 PM
ez pz
Vyon â€” 05/09/2023 11:52 PM
good job dude
SPOOK_EXE â€” 05/09/2023 11:52 PM
yee
SPOOK_EXE â€” 06/14/2023 9:01 AM
https://cdn.discordapp.com/attachments/922129708525707294/1118317573172375623/70839040709__DBD64A2D-36BE-4303-A180-51A8A5509AAD.mov
Vyon â€” 06/14/2023 9:31 AM
Jesus
Dude that looks mad complex
SPOOK_EXE â€” 06/14/2023 9:36 AM
lmao
nah its like 4 wires for each motor which goes into the driver
and then 3 wires from the driver which i actually have to worry about 
Image
Vyon â€” 06/14/2023 9:39 AM
What does it take to get started with electronics like that
?
SPOOK_EXE â€” 06/14/2023 9:40 AM
not much tbh
Vyon â€” 06/14/2023 9:41 AM
Is it an expensive hobby?
SPOOK_EXE â€” 06/14/2023 9:41 AM
https://www.youtube.com/watch?v=1ENiVwk8idM
YouTube
Fireship
Arduino in 100 Seconds
Image
SPOOK_EXE â€” 06/14/2023 9:41 AM
depends what you are trying to do
these motors were $40 each
and the drivers were also $30 each or smthing close to that 
Vyon â€” 06/14/2023 9:42 AM
I thought arduino ran on c code
Not it's own language lol
SPOOK_EXE â€” 06/14/2023 9:42 AM
its C-like
has some things added to C
Vyon â€” 06/14/2023 9:42 AM
Ohhhh
SPOOK_EXE â€” 06/14/2023 9:43 AM
https://www.youtube.com/@BenEater
YouTube
Ben Eater
Subscribe to see tutorial-style videos about electronics, computer architecture, networking, and various other technical subjects. If you want to see more on a particular subject, leave a comment and I'll try my best to add more.

If you'd like to support my work, please do!
https://www.patreon.com/beneater
https://paypal.me/beneater
https://cas...
Image
https://www.youtube.com/@styropyro
YouTube
styropyro
Professional Mad Scientist.

I like building crazy lasers and high voltage contraptions out of scrap parts and military surplus equipment. For me science is life, and I feel there's no better way of getting in touch with nature than to study its underlying laws and then using them to create things. I'm certainly an "old school" kind of maker as...
Image
https://www.youtube.com/@ElectroBOOM
YouTube
ElectroBOOM
Want to subconsciously learn while being entertained? Then subscribe!!
My videos are also available on Odysee in the link below, in case YouTube decides to remove them. Subscribe there too:
https://odysee.com/$/invite/@ElectroBOOM:9
My twitter: https://twitter.com/ElectroBOOMGuy
My Instagram: https://www.instagram.com/mehdi_sadaghdar
My Facebo...
Image
watch guys like these too
what im doing now is pretty basic, just need some level of undestanding on circuits
ï»¿
{
	// NOP: noop
	NOP = 0,

	// BREAK: debugger break
	BREAK,

	// LOADNIL: sets register to nil
	// A: target register
	LOADNIL,

	// LOADB: sets register to boolean and jumps to a given short offset (used to compile comparison results into a boolean)
	// A: target register
	// B: value (0/1)
	// C: jump offset
	LOADB,

	// LOADN: sets register to a number literal
	// A: target register
	// D: value (-32768..32767)
	LOADN,

	// LOADK: sets register to an entry from the constant table from the proto (number/string)
	// A: target register
	// D: constant table index (0..32767)
	LOADK,

	// MOVE: move (copy) value from one register to another
	// A: target register
	// B: source register
	MOVE,

	// GETGLOBAL: load value from global table using constant string as a key
	// A: target register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	GETGLOBAL,

	// SETGLOBAL: set value in global table using constant string as a key
	// A: source register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	SETGLOBAL,

	// GETUPVAL: load upvalue from the upvalue table for the current function
	// A: target register
	// B: upvalue index
	GETUPVAL,

	// SETUPVAL: store value into the upvalue table for the current function
	// A: target register
	// B: upvalue index
	SETUPVAL,

	// CLOSEUPVALS: close (migrate to heap) all upvalues that were captured for registers >= target
	// A: target register
	CLOSEUPVALS,

	// GETIMPORT: load imported global table global from the constant table
	// A: target register
	// D: constant table index (0..32767); we assume that imports are loaded into the constant table
	// AUX: 3 10-bit indices of constant strings that, combined, constitute an import path; length of the path is set by the top 2 bits (1,2,3)
	GETIMPORT,

	// GETTABLE: load value from table into target register using key from register
	// A: target register
	// B: table register
	// C: index register
	GETTABLE,

	// SETTABLE: store source register into table using key from register
	// A: source register
	// B: table register
	// C: index register
	SETTABLE,

	// GETTABLEKS: load value from table into target register using constant string as a key
	// A: target register
	// B: table register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	GETTABLEKS,

	// SETTABLEKS: store source register into table using constant string as a key
	// A: source register
	// B: table register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	SETTABLEKS,

	// GETTABLEN: load value from table into target register using small integer index as a key
	// A: target register
	// B: table register
	// C: index-1 (index is 1..256)
	GETTABLEN,

	// SETTABLEN: store source register into table using small integer index as a key
	// A: source register
	// B: table register
	// C: index-1 (index is 1..256)
	SETTABLEN,

	// NEWCLOSURE: create closure from a child proto; followed by a CAPTURE instruction for each upvalue
	// A: target register
	// D: child proto index (0..32767)
	NEWCLOSURE,

	// NAMECALL: prepare to call specified method by name by loading function from source register using constant index into target register and copying source register into target register + 1
	// A: target register
	// B: source register
	// C: predicted slot index (based on hash)
	// AUX: constant table index
	// Note that this instruction must be followed directly by CALL; it prepares the arguments
	// This instruction is roughly equivalent to GETTABLEKS + MOVE pair, but we need a special instruction to support custom __namecall metamethod
	NAMECALL,

	// CALL: call specified function
	// A: register where the function object lives, followed by arguments; results are placed starting from the same register
	// B: argument count + 1, or 0 to preserve all arguments up to top (MULTRET)
	// C: result count + 1, or 0 to preserve all values and adjust top (MULTRET)
	CALL,

	// RETURN: returns specified values from the function
	// A: register where the returned values start
	// B: number of returned values + 1, or 0 to return all values up to top (MULTRET)
	RETURN,

	// JUMP: jumps to target offset
	// D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
	JUMP,

	// JUMPBACK: jumps to target offset; this is equivalent to JUMP but is used as a safepoint to be able to interrupt while/repeat loops
	// D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
	JUMPBACK,

	// JUMPIF: jumps to target offset if register is not nil/false
	// A: source register
	// D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
	JUMPIF,

	// JUMPIFNOT: jumps to target offset if register is nil/false
	// A: source register
	// D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
	JUMPIFNOT,

	// JUMPIFEQ, JUMPIFLE, JUMPIFLT, JUMPIFNOTEQ, JUMPIFNOTLE, JUMPIFNOTLT: jumps to target offset if the comparison is true (or false, for NOT variants)
	// A: source register 1
	// D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
	// AUX: source register 2
	JUMPIFEQ,
	JUMPIFLE,
	JUMPIFLT,
	JUMPIFNOTEQ,
	JUMPIFNOTLE,
	JUMPIFNOTLT,

	// ADD, SUB, MUL, DIV, MOD, POW: compute arithmetic operation between two source registers and put the result into target register
	// A: target register
	// B: source register 1
	// C: source register 2
	ADD,
	SUB,
	MUL,
	DIV,
	MOD,
	POW,

	// ADDK, SUBK, MULK, DIVK, MODK, POWK: compute arithmetic operation between the source register and a constant and put the result into target register
	// A: target register
	// B: source register
	// C: constant table index (0..255)
	ADDK,
	SUBK,
	MULK,
	DIVK,
	MODK,
	POWK,

	// AND, OR: perform `and` or `or` operation (selecting first or second register based on whether the first one is truthy) and put the result into target register
	// A: target register
	// B: source register 1
	// C: source register 2
	AND,
	OR,

	// ANDK, ORK: perform `and` or `or` operation (selecting source register or constant based on whether the source register is truthy) and put the result into target register
	// A: target register
	// B: source register
	// C: constant table index (0..255)
	ANDK,
	ORK,

	// CONCAT: concatenate all strings between B and C (inclusive) and put the result into A
	// A: target register
	// B: source register start
	// C: source register end
	CONCAT,

	// NOT, MINUS, LENGTH: compute unary operation for source register and put the result into target register
	// A: target register
	// B: source register
	NOT,
	MINUS,
	LENGTH,

	// NEWTABLE: create table in target register
	// A: target register
	// B: table size, stored as 0 for v=0 and ceil(log2(v))+1 for v!=0
	// AUX: array size
	NEWTABLE,

	// DUPTABLE: duplicate table using the constant table template to target register
	// A: target register
	// D: constant table index (0..32767)
	DUPTABLE,

	// SETLIST: set a list of values to table in target register
	// A: target register
	// B: source register start
	// C: value count + 1, or 0 to use all values up to top (MULTRET)
	// AUX: table index to start from
	SETLIST,

	// FORNPREP: prepare a numeric for loop, jump over the loop if first iteration doesn't need to run
	// A: target register; numeric for loops assume a register layout [limit, step, index, variable]
	// D: jump offset (-32768..32767)
	// limit/step are immutable, index isn't visible to user code since it's copied into variable
	FORNPREP,

	// FORNLOOP: adjust loop variables for one iteration, jump back to the loop header if loop needs to continue
	// A: target register; see FORNPREP for register layout
	// D: jump offset (-32768..32767)
	FORNLOOP,

	// FORGLOOP: adjust loop variables for one iteration of a generic for loop, jump back to the loop header if loop needs to continue
	// A: target register; generic for loops assume a register layout [generator, state, index, variables...]
	// D: jump offset (-32768..32767)
	// AUX: variable count (1..255) in the low 8 bits, high bit indicates whether to use ipairs-style traversal in the fast path
	// loop variables are adjusted by calling generator(state, index) and expecting it to return a tuple that's copied to the user variables
	// the first variable is then copied into index; generator/state are immutable, index isn't visible to user code
	FORGLOOP,

	// FORGPREP_INEXT: prepare FORGLOOP with 2 output variables (no AUX encoding), assuming generator is luaB_inext, and jump to FORGLOOP
	// A: target register (see FORGLOOP for register layout)
	FORGPREP_INEXT,

	// removed in v3
	DEP_FORGLOOP_INEXT,

	// FORGPREP_NEXT: prepare FORGLOOP with 2 output variables (no AUX encoding), assuming generator is luaB_next, and jump to FORGLOOP
	// A: target register (see FORGLOOP for register layout)
	FORGPREP_NEXT,

	// removed in v3
	DEP_FORGLOOP_NEXT,

	// GETVARARGS: copy variables into the target register from vararg storage for current function
	// A: target register
	// B: variable count + 1, or 0 to copy all variables and adjust top (MULTRET)
	GETVARARGS,

	// DUPCLOSURE: create closure from a pre-created function object (reusing it unless environments diverge)
	// A: target register
	// D: constant table index (0..32767)
	DUPCLOSURE,

	// PREPVARARGS: prepare stack for variadic functions so that GETVARARGS works correctly
	// A: number of fixed arguments
	PREPVARARGS,

	// LOADKX: sets register to an entry from the constant table from the proto (number/string)
	// A: target register
	// AUX: constant table index
	LOADKX,

	// JUMPX: jumps to the target offset; like JUMPBACK, supports interruption
	// E: jump offset (-2^23..2^23; 0 means "next instruction" aka "don't jump")
	JUMPX,

	// FASTCALL: perform a fast call of a built-in function
	// A: builtin function id (see LuauBuiltinFunction)
	// C: jump offset to get to following CALL
	// FASTCALL is followed by one of (GETIMPORT, MOVE, GETUPVAL) instructions and by CALL instruction
	// This is necessary so that if FASTCALL can't perform the call inline, it can continue normal execution
	// If FASTCALL *can* perform the call, it jumps over the instructions *and* over the next CALL
	// Note that FASTCALL will read the actual call arguments, such as argument/result registers and counts, from the CALL instruction
	FASTCALL,

	// COVERAGE: update coverage information stored in the instruction
	// E: hit count for the instruction (0..2^23-1)
	// The hit count is incremented by VM every time the instruction is executed, and saturates at 2^23-1
	COVERAGE,

	// CAPTURE: capture a local or an upvalue as an upvalue into a newly created closure; only valid after NEWCLOSURE
	// A: capture type, see LuauCaptureType
	// B: source register (for VAL/REF) or upvalue index (for UPVAL/UPREF)
	CAPTURE,

	// removed in v3
	DEP_JUMPIFEQK,
	DEP_JUMPIFNOTEQK,

	// FASTCALL1: perform a fast call of a built-in function using 1 register argument
	// A: builtin function id (see LuauBuiltinFunction)
	// B: source argument register
	// C: jump offset to get to following CALL
	FASTCALL1,

	// FASTCALL2: perform a fast call of a built-in function using 2 register arguments
	// A: builtin function id (see LuauBuiltinFunction)
	// B: source argument register
	// C: jump offset to get to following CALL
	// AUX: source register 2 in least-significant byte
	FASTCALL2,

	// FASTCALL2K: perform a fast call of a built-in function using 1 register argument and 1 constant argument
	// A: builtin function id (see LuauBuiltinFunction)
	// B: source argument register
	// C: jump offset to get to following CALL
	// AUX: constant index
	FASTCALL2K,

	// FORGPREP: prepare loop variables for a generic for loop, jump to the loop backedge unconditionally
	// A: target register; generic for loops assume a register layout [generator, state, index, variables...]
	// D: jump offset (-32768..32767)
	FORGPREP,

	// JUMPXEQKNIL, JUMPXEQKB: jumps to target offset if the comparison with constant is true (or false, see AUX)
	// A: source register 1
	// D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
	// AUX: constant value (for boolean) in low bit, NOT flag (that flips comparison result) in high bit
	JUMPXEQKNIL,
	JUMPXEQKB,

	// JUMPXEQKN, JUMPXEQKS: jumps to target offset if the comparison with constant is true (or false, see AUX)
	// A: source register 1
	// D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
	// AUX: constant table index in low 24 bits, NOT flag (that flips comparison result) in high bit
	JUMPXEQKN,
	JUMPXEQKS,

	// Enum entry for number of opcodes, not a valid opcode by itself!
	_COUNT,
}